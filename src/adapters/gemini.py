from adapters.adapter import LLMAdapter
import google.generativeai as genai
from deployment.prompt_templates import rewrite_prompt
import asyncio

class GeminiAdapter(LLMAdapter):
    """
    Adapter for Gemini
    
    Inherits from:
        LLMAdapter: A base class 
    """

    def __init__(self, api_key: str):
        """
        Initializes the GeminiAdapter with the provided API key.

        Args:
            api_key (str): Gemini API key used to authenticate requests.
        """
        self.api_key = api_key
        genai.configure(api_key=self.api_key)
        self.model = genai.GenerativeModel("gemini-pro")

    async def rewrite(self, text: str, style: str) -> str:
        """
        Rewrites the given text in the specified style using Gemini

        Args:
            text (str): The input text to be rewritten.
            style (str): The desired writing style (e.g., "pirate", "formal", "haiku").

        Returns:
            str: The rewritten text generated by the model.
        """
        prompt = rewrite_prompt(text, style)
        return await asyncio.to_thread(self._sync_generate, prompt)

    def _sync_generate(self, prompt: str) -> str:
        response = self.model.generate_content(prompt)
        return response.text.strip()